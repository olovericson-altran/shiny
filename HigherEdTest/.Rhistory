cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE)
f_stop_words <- data.frame(word=c("sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(word, start_comment, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
View(dtm_data)
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
View(dtm_data)
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
View(dtm_data)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
stop_words
f_stop_words <- data.frame(word=c("en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("min", "de", "som", "just", "med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
f_stop_words <- data.frame(word=c("mitt", "man", "min", "de", "som", "just", "med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("ni", "var", "mitt", "man", "min", "de", "som", "just", "med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
f_stop_words <- data.frame(word=c("ni", "var", "mitt", "man", "min", "de", "som", "just", "med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("lite", "ska", "vad", "ni", "var", "mitt", "man", "min", "de", "som", "just", "med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("in", "eller", "lite", "ska", "vad", "ni", "var", "mitt", "man", "min", "de", "som", "just", "med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
f_stop_words <- data.frame(word=c("nu", "då", "in", "eller", "lite", "ska", "vad", "ni", "var", "mitt", "man", "min", "de", "som", "just", "med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 10, control = list(seed = 1234))
tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta) %>%
View(.)
lda_model <- LDA(dtm_data, k = 5, control = list(seed = 1234))
lda_model <- LDA(dtm_data, k = 5, control = list(seed = 1234))
top_terms <- tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
f_stop_words <- data.frame(word=c("du", "dem", "nu", "då", "in", "eller", "lite", "ska", "vad", "ni", "var", "mitt", "man", "min", "de", "som", "just", "med", "ha", "hur", "till", "så", "ett", "en", "den", "sanna", "gustav", "sara", "jag", "på", "i", "är", "att", "men", "för", "hej", "det", "har", "inte", "om", "och"))
dtm_data <- cleaned_first_utterance %>%
unnest_tokens(word, start_comment) %>%
anti_join(f_stop_words) %>%
count(id, word, sort = TRUE) %>%
inner_join(cleaned_first_utterance) %>%
cast_dtm(start_comment, word, n)
lda_model <- LDA(dtm_data, k = 5, control = list(seed = 1234))
top_terms <- tidy(lda_model, matrix = "beta") %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
top_terms <- f_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
f_topics <- tidy(lda_model, matrix = "beta")
top_terms <- f_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
beta_spread <- ap_topics %>%
mutate(topic = paste0("topic", topic)) %>%
spread(topic, beta) %>%
filter(topic1 > .001 | topic2 > .001) %>%
mutate(log_ratio = log2(topic2 / topic1))
beta_spread <- f_topics %>%
mutate(topic = paste0("topic", topic)) %>%
spread(topic, beta) %>%
filter(topic1 > .001 | topic2 > .001) %>%
mutate(log_ratio = log2(topic2 / topic1))
beta_spread
f_docs <- tidy(lda_model, matrix = "gamma")
f_docs
View(f_docs)
f_docs %>%
group_by(topic) %>%
top_n(10, gamma) %>%
ungroup() %>%
arrange(topic, -gamma)
f_docs %>%
group_by(topic) %>%
top_n(10, gamma) %>%
ungroup() %>%
arrange(topic, -gamma) %>%
mutate(document = reorder(document, gamma)) %>%
ggplot(aes(term, gamma, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
f_docs %>%
group_by(topic) %>%
top_n(10, gamma) %>%
ungroup() %>%
arrange(topic, -gamma) %>%
mutate(document = reorder(document, gamma)) %>%
ggplot(aes(document, gamma, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
f_docs %>%
group_by(topic) %>%
top_n(10, gamma) %>%
ungroup() %>%
arrange(topic, -gamma) %>%
mutate(document = strwrap(document)) %>%
mutate(document = reorder(document, gamma)) %>%
ggplot(aes(document, gamma, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
f_docs %>%
group_by(topic) %>%
top_n(10, gamma) %>%
ungroup() %>%
arrange(topic, -gamma) %>%
rowwise() %>%
mutate(document = strwrap(document)) %>%
ungroup() %>%
mutate(document = reorder(document, gamma)) %>%
ggplot(aes(document, gamma, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
f_docs %>%
group_by(topic) %>%
top_n(10, gamma) %>%
ungroup() %>%
arrange(topic, -gamma) %>%
rowwise() %>%
mutate(document = paste(strwrap(document), collapse="\n")) %>%
ungroup() %>%
mutate(document = reorder(document, gamma)) %>%
ggplot(aes(document, gamma, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
f_docs %>%
group_by(topic) %>%
top_n(10, gamma) %>%
ungroup() %>%
arrange(topic, -gamma) %>%
rowwise() %>%
mutate(document = paste(strwrap(document, 40), collapse="\n")) %>%
ungroup() %>%
mutate(document = reorder(document, gamma)) %>%
ggplot(aes(document, gamma, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
f_docs %>%
group_by(topic) %>%
top_n(10, gamma) %>% View(.)
lda_model <- LDA(dtm_data, k = 4, control = list(seed = 1234))
f_topics <- tidy(lda_model, matrix = "beta")
top_terms <- f_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
beta_spread <- f_topics %>%
mutate(topic = paste0("topic", topic)) %>%
spread(topic, beta) %>%
filter(topic1 > .001 | topic2 > .001 |) %>%
mutate(log_ratio = log2(topic2 / topic1))
beta_spread
cleaned_first_utterance
write_csv2(cleaned_first_utterance, "first_utterance.csv")
write.csv2(cleaned_first_utterance, "first_utterance.csv")
readxl::read_excel("first_utterance.xlsx")
work_data <- readxl::read_excel("first_utterance.xlsx")
View(work_data)
jsonlite::toJSON(work_data)
work_data %>% select(text=start_comment)
work_data %>% select(text=start_comment, intent=Klass)
work_data %>%
select(text=start_comment, intent=Klass, entities=list())
work_data %>%
select(text=start_comment, intent=Klass, entities=NA)
work_data %>%
select(text=start_comment, intent=Klass) %>%
mutate(entities=list())
work_data %>%
select(text=start_comment, intent=Klass) %>%
mutate(entities=NA)
work_data %>%
select(text=start_comment, intent=Klass) %>%
mutate(entities=NA) %>%
toJSON(.)
work_data %>%
select(text=start_comment, intent=Klass) %>%
mutate(entities=NA) %>%
jsonlite::toJSON(.)
work_data %>%
select(text=start_comment, intent=Klass) %>%
mutate(entities=NA)
work_data %>%
select(text=start_comment, intent=Klass) %>%
mutate(entities=NA) %>%
jsonlite::toJSON(.)
toJSON(list(1L, c("a", "b"), list(c(FALSE, FALSE, TRUE), rnorm(3))))
library(jsonlite)
toJSON(list(1L, c("a", "b"), list(c(FALSE, FALSE, TRUE), rnorm(3))))
work_data %>%
select(text=start_comment, intent=Klass) %>%
mutate(entities=NA) %>%
jsonlite::toJSON(., asls=T)
work_data %>%
select(text=start_comment, intent=Klass) %>%
mutate(entities=NA) %>% View(.)
data_to_json <- work_data %>%
select(text=start_comment, intent=Klass)
data_to_json$entities <- list()
data_to_json$entities <- NA
toJSON(data_to_json)
?vector
vector(mode="list")
data_to_json$entities <- vector(mode="list")
rep(vector(mode="list"), 263)
rep(vector(mode="list"), 263)
data_to_json$entities <- rep(vector(mode="list"), 263)
emptyNamedList
data_to_json$entities <- emptyNamedList
data_to_json$entities <- "emptyNamedList"
toJSON(data_to_json)
data_to_json$entities <- NA
toJSON(data_to_json, .na=emptyNamedList)
toJSON(data_to_json, .na="[]")
data_to_json$entities <- NA
toJSON(data_to_json, .na="[]")
toJSON(emptyNamedList)
install.packages("jsonlite")
install.packages("jsonlite")
toJSON(data_to_json, .na=emptyNamedList)
library(jsonlite)
toJSON(data_to_json)
apply(data_to_json, 1, print)
full_json <- list()
full_json["utterances"] <- apply(data_to_json, 1, print)
toJSON(full_json)
createRow <- function(row) {
row["entities"] <- list()
row
}
full_json["utterances"] <- apply(data_to_json, 1, createRow)
list(0)
createRow <- function(row) {
row
}
full_json["utterances"] <- apply(data_to_json, 1, createRow)
toJSON(full_json)
apply(data_to_json, 1, createRow)
data <- apply(data_to_json, 1, createRow)
data
toJSON(full_json)
toJSON(data_to_json)
jsonlite::write_json(toJSON(data_to_json), "data.json")
write(toJSON(data_to_json), "data.json")
shiny::runApp('C:/Users/oericson/source/repos/Shiny/HigherEdDashboardKiller')
setwd("~/")
setwd("C:/Users/oericson/source/repos/Shiny/HigherEdTest")
runApp()
library(tidyverse)
install.packages("dbplyr")
install.packages("dbplyr")
install.packages("DBI")
install.packages("DBI")
install.packages("odbc")
con <- DBI::dbConnect(odbc::odbc(),
Driver = "SQL Server",
Server = "higheredanalytics.database.windows.net",
Database = "analytics",
UID = "AnalyticsDWHAdmin",
PWD = "SJhg8ws72db=!+So")
con <- DBI::dbConnect(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "higheredanalytics.database.windows.net",
Database = "analytics",
UID = "AnalyticsDWHAdmin",
PWD = "SJhg8ws72db=!+So")
tbl(con, "FactEvents")
dbplyr::tbl(con, "FactEvents")
library(dplyr)
tbl(con, "FactEvents")
library(readr)
write_RDS(tbl(con, "FactEvents") %>% collect(), "FactEvents")
write_rds(tbl(con, "FactEvents") %>% collect(), "FactEvents")
library(dplyr)
library(dbplyr)
devtools::install_github("rstudio/pool")
install.packages("devtools")
devtools::install_github("rstudio/pool")
con <- pool::dbPool(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "higheredanalytics.database.windows.net",
Database = "analytics",
UID = "AnalyticsDWHAdmin",
PWD = "SJhg8ws72db=!+So")
shiny::runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
library(stringr)
runApp()
runApp()
runApp()
runApp()
tbl(con, "FactVisits") %>% mutate(if_else(ApplicationId == 0, 1, 0))
tbl(con, "FactVisits") %>% mutate(ifelse(Visits == 0, 1, 0))
tbl(con, "FactVisits") %>% mutate(ifelse(visits == 0, 1, 0))
tbl(con, "FactVisits") %>% mutate(ifelse(visits == 0.0, 1.0, 0.0))
tbl(con, "FactVisits") %>% mutate(ifelse(SchoolCountryName == "Hej", 1, 0))
tbl(con, "FactVisits") %>% mutate(hej = ifelse(SchoolCountryName == "Hej", 1, 0))
con <- pool::dbPool(odbc::odbc(),
Driver = "SQL Server",
Server = "higheredanalytics.database.windows.net",
Database = "analytics",
UID = "AnalyticsDWHAdmin",
PWD = "SJhg8ws72db=!+So")
con <- pool::dbPool(Driver = "SQL Server",
Server = "higheredanalytics.database.windows.net",
Database = "analytics",
UID = "AnalyticsDWHAdmin",
PWD = "SJhg8ws72db=!+So")
con <- pool::dbPool(odbc::odbc(),
Driver = "ODBC Driver 13 for SQL Server",
Server = "higheredanalytics.database.windows.net",
Database = "analytics",
UID = "AnalyticsDWHAdmin",
PWD = "SJhg8ws72db=!+So")
tbl(con, "FactVisits") %>% mutate(hej = ifelse(SchoolCountryName == "Hej", 1, 0))
translate_sql(if_else(ApplicationId > 0, visits, 0))
as.integer(0)
runApp()
tbl(con, "FactVisits") %>%
mutate(position_view = case_when(ApplicationId > 0 ~ visits, TRUE ~ 0))
tbl(con, "FactVisits") %>% mutate(position_view = case_when(ApplicationId > 0 ~ visits, TRUE ~ 0))
tbl(con, "FactVisits") %>% mutate(position_view = visits)
tbl(con, "FactVisits") %>% mutate(position_view = visits) %>% select(position_view)
tbl(con, "FactVisits") %>% mutate(position_view = if_else(1==1, 0, visits) %>% select(position_view)
tbl(con, "FactVisits") %>% mutate(position_view = if_else(1==1, 0, visits)) %>% select(position_view)
tbl(con, "FactVisits") %>% mutate(position_view = if_else(1==1, 0, 2)) %>% select(position_view)
devtools::install_github("tidyverse/dbplyr"
)
